# cloudbuild.yaml
options:
  logging: CLOUD_LOGGING_ONLY

steps:
  # Step 1: Install common tools (curl, unzip, build essentials)
  # Using a standard Ubuntu image for building C/C++ projects
  - name: 'ubuntu'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        apt-get update && apt-get install -y curl unzip build-essential git 
        # 'build-essential' provides gcc, g++, make etc. Adjust based on your project's build dependencies (e.g., autotools, cmake)

  # Step 2: Download SonarScanner CLI
  # We will use the 'ubuntu' builder for unzip now, so this step can be combined.
  - name: 'ubuntu' # Using ubuntu for all download and unzip operations
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        curl -sS 'https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006.zip' -o '/tmp/sonar-scanner.zip'
        unzip '/tmp/sonar-scanner.zip' -d '/usr/local/'

  # Step 3: Download SonarSource Build Wrapper
  # Using the same approach for build-wrapper download and unzip
  - name: 'ubuntu' # Using ubuntu for all download and unzip operations
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        curl -sS '${_SONAR_HOST_URL}/static/cpp/build-wrapper-linux-x86.zip' -o '/tmp/build-wrapper.zip'
        unzip '/tmp/build-wrapper.zip' -d '/usr/local/'

  # Step 4: Configure and Build your C/C++ project using the Build Wrapper
  - name: 'ubuntu' # Use the same or similar builder as your actual project build
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Add build-wrapper to PATH for convenience
        export PATH="/usr/local/build-wrapper-linux-x86:$$PATH"
        chmod +x /usr/local/build-wrapper-linux-x86/build-wrapper

        # Create a directory for build-wrapper output
        mkdir build_wrapper_output

        # Clean your project (important for a fresh analysis)
        make clean || true

        # Execute your project's build command through build-wrapper
        # Replace 'make -j$(nproc)' with your actual build command (e.g., 'cmake . && make', 'ninja', etc.)
        build-wrapper-linux-x86 --out-dir build_wrapper_output make -j$(nproc)

  # Step 5: Run SonarScanner analysis
  - name: 'ubuntu' # Requires Java Runtime Environment (JRE) for SonarScanner
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Add sonar-scanner to PATH
        export PATH="/usr/local/sonar-scanner-5.0.1.3006/bin:$$PATH"

        # Run SonarScanner. It will automatically pick up sonar-project.properties
        # and use the build-wrapper output directory specified there.
        sonar-scanner \
          -Dsonar.host.url=${_SONAR_HOST_URL} \
          -Dsonar.token=sqp_8011d7ed31ea61bf40db20509b79b3b245b61ead # Reminder: Hardcoding token is not secure

substitutions:
  _SONAR_HOST_URL: 'https://sonar-demo-pt.iexperts.cloud' # Replace with your SonarQube server URL
  # Removed _SONAR_TOKEN from here as it's hardcoded in the sonar-scanner command
  # (though using Secret Manager is strongly recommended for security)

secrets:
  # The secrets block is not needed if you're hardcoding the token.
  # If you revert to Secret Manager, uncomment this and the _SONAR_TOKEN substitution.
  # - id: sonar-token
  #   secretEnv: 'SONAR_TOKEN'
